@Article{griswold90,
  author = 	 {Griswold, J. S. and Lightle, T. L. and Lovelady, J. G.},
  title = 	 {{Hurricane Hugo: Effect On State Government Communications.}},
  journal = 	 {IEEE Communications Magazine},
  year = 	 1990,
  volume =	 28,
  number =	 6,
  pages =	 {12-17}
}

@Book{eberspaecher97,
  author =	 {Ebersp"acher, J. and V"ogel, H.-J.},
  title = 	 {{GSM - Global System for Mobile Communication. 
        Vermittlung, Dienste und Protokolle in digitalen Mobilfunknetzen.}},
  publisher = 	 {Teubner, Stuttgart},
  year = 	 1997
}

@Misc{arnaud99,
  author =	 {Arnaud, B.~St.},
  title =	 {{Gigabit Internet to every Canadian Home by 2005}},
  howpublished = {\url{http://www.canet2.net/archeng/home.html}},
  year =	 1999
}

@article{Benzekki2016,
author = {Benzekki, Kamal and {El Fergougui}, Abdeslam and {Elbelrhiti Elalaoui}, Abdelbaki},
doi = {10.1002/sec.1737},
file = {:home/prometheus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Benzekki, El Fergougui, Elbelrhiti Elalaoui - 2016 - Software-defined networking (SDN) a survey.pdf:pdf},
issn = {19390114},
journal = {Security and Communication Networks},
keywords = {OpenFlow,SDN architecture,SDN challenges,SDN issues,software‐defined networking},
mendeley-groups = {FP},
month = {dec},
number = {18},
pages = {5803--5833},
publisher = {John Wiley {\&} Sons, Ltd},
title = {{Software-defined networking (SDN): a survey}},
url = {http://doi.wiley.com/10.1002/sec.1737},
volume = {9},
year = {2016}
}

@misc{TurnerJonathan;BianQiyong;Waldvogel1998,
author = {{Turner, Jonathan; Bian, Qiyong; Waldvogel}, Marcel},
file = {:home/prometheus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Turner, Jonathan Bian, Qiyong Waldvogel - 1998 - Routing Table Compression Using Binary Tree Collapse.pdf:pdf},
mendeley-groups = {FP},
title = {{Routing Table Compression Using Binary Tree Collapse}},
year = {1998}
}

@article{Luo2015,
abstract = {In OpenFlow-driven SDN, flow tables are TCAM-hungry; commodity switches suffer from limited concrete flow table size. One method for coping with the limitations is to use aggregation schemes to reduce the number of flow entries required to express the same forwarding semantics. Unfortunately, the aggregation of rules would retard table updates and lengthen the updating duration, during which, the data plane is inconsistent with the control plane. Forwarding errors such as Reachability Failures, Forwarding Loops, Traffic Isolation and Leakage are prone to occur. Since network updates take place frequently in practice, the aggregation scheme must be efficient and effective. In this paper, we proposed FFTA (Fast Flow Table Aggregation) and its online companion, iFFTA (incremental FFTA), to make practical flow table aggregation. FFTA is an offline solution performing snapshot aggregation of non-prefix rules by (1) splitting them into prefix-permutable partitions in an aggregation-aware manner, and (2) applying optimal prefix-based aggregation techniques, respectively. When some original rules are updated, iFFTA is triggered to incorporate the update immediately by leveraging the order-independence relationship and structure information of rules. To the best of our knowledge, iFFTA is the first online aggregation scheme for non-prefix rules. We employed public available prefix rules as well as synthetic non-prefix rules generated with real parameters to evaluate their performances. Extensive experiments demonstrated that FFTA significantly outperforms prior art on both efficiency and effectiveness, while iFFTA greatly simplifies the update of aggregated rules with an acceptable loss of compression ratio. Accordingly, users could make a combination use of FFTA and iFFTA in practice: call iFFTA usually and recall FFTA once the switch is running out of concrete flow table space.},
author = {Luo, Shouxi and Yu, Hongfang and Li, Lemin},
doi = {10.1016/j.comnet.2015.09.016},
file = {:home/prometheus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Luo, Yu, Li - 2015 - Practical flow table aggregation in SDN(2).pdf:pdf},
isbn = {9781479935727},
issn = {13891286},
journal = {Computer Networks},
keywords = {Flow table aggregation,SDN,TCAM,Update},
mendeley-groups = {FP},
pages = {72--88},
publisher = {Elsevier B.V.},
title = {{Practical flow table aggregation in SDN}},
url = {http://dx.doi.org/10.1016/j.comnet.2015.09.016},
volume = {92},
year = {2015}
}

@article{Nguyen2016,
abstract = {Software-Defined Networking (SDN) abstracts low- level network functionalities to simplify network management and reduce costs. The OpenFlow protocol implements the SDN concept by abstracting network communications as flows to be processed by network elements. In OpenFlow, the high-level policies are translated into network primitives called rules that are distributed over the network. While the abstraction offered by OpenFlow allows to potentially implement any policy, it raises the new question of how to define the rules and where to place them in the network while respecting all technical and administrative requirements. In this paper, we propose a comprehensive study of the so-called OpenFlow rules placement problem with a survey of the various proposals intending to solve it. Our study is multi-fold. First, we define the problem and its challenges. Second, we overview the large number of solutions proposed, with a clear distinction between solutions focusing on memory management and those proposing to reduce signaling traffic to ensure scalability. Finally, we discuss potential research directions around the OpenFlow rules placement problem.},
author = {Nguyen, Xuan Nam and Saucez, Damien and Barakat, Chadi and Turletti, Thierry},
doi = {10.1109/COMST.2015.2506984},
file = {:home/prometheus/Downloads/survey.pdf:pdf},
issn = {1553877X},
journal = {IEEE Communications Surveys and Tutorials},
keywords = {OpenFlow,Software-Defined Networking,rules placement,survey},
mendeley-groups = {FP},
number = {2},
pages = {1273--1286},
title = {{Rules Placement Problem in OpenFlow Networks: A Survey}},
volume = {18},
year = {2016}
}

@misc{OpenNetworkingFoundation2009,
author = {{Open Networking Foundation}},
file = {:home/prometheus/Downloads/openflow-spec-v1.0.0.pdf:pdf},
mendeley-groups = {FP},
title = {{Openflow Switch Specification 1.0}},
volume = {0},
year = {2009}
}

@misc{Nunes2014,
archivePrefix = {arXiv},
arxivId = {1406.0440},
author = {Nunes, Bruno Astuto A and Mendonca, Marc and Nguyen, Xuan-nam and Obraczka, Katia and Turletti, Thierry},
doi = {10.1109/SURV.2014.012214.00180>},
eprint = {1406.0440},
file = {:home/prometheus/Downloads/hal{\_}final.pdf:pdf},
isbn = {1553-877X VO - 16},
issn = {1553-877X},
mendeley-groups = {FP},
number = {3},
pages = {1617--1634},
pmid = {14217261},
title = {{A Survey of Software-Defined Networking : Past , Present , and Future of Programmable Networks}},
volume = {16},
year = {2014}
}

@article{Campbell1999,
abstract = {In this paper we present a programmable networking model that provides a common framework for understanding the state-of-the-art in programmable networks. A number of projects are reviewed and discussed against a set of programmable network characteristics. We believe that a number of important innovations are creating a paradigm shift in networking leading to higher levels of network programmability. These innovations include the separation between transmission hardware and control software, availability of open programmable network interfaces, accelerated virtualization of networking infrastructure, rapid creation and deployment of new network services and environments for resource partitioning and coexistence of multiple distinct network architectures. We present a simple qualitative comparison of the surveyed work and make a number of observations about the direction of the field.},
author = {Campbell, A.T. and {De Meer}, H.G. and Kounavis, M.E. and Miki, K. and Vicente, J.B. and Villela, D.},
doi = {10.1145/505733.505735},
file = {:home/prometheus/Downloads/prog.pdf:pdf},
isbn = {0146-4833},
issn = {01464833},
journal = {ACM SIGCOMM Computer Communication Review},
mendeley-groups = {FP},
number = {2},
pages = {23},
title = {{A survey of programmable networks}},
url = {http://portal.acm.org/citation.cfm?id=505733.505735},
volume = {29},
year = {1999}
}

@article{Anderson2005,
author = {Anderson, Thomas and Peterson, Larry and Shenker, Scott and Turner, Jonathan},
doi = {ISSN:0018-9162},
file = {:home/prometheus/Downloads/impasse.pdf:pdf},
isbn = {ISSN{\~{}}{\~{}}00189162},
issn = {00189162},
journal = {Production},
mendeley-groups = {FP},
number = {4},
pages = {34--41},
title = {{Overcoming the Internet Impasse through Most current Internet research involves either empirical measurement}},
volume = {38},
year = {2005}
}

@misc{OpenNetworkingFoundation2015,
author = {{Open Networking Foundation}},
file = {:home/prometheus/Downloads/openflow-switch-v1.5.1.pdf:pdf},
mendeley-groups = {FP},
pages = {1--283},
title = {{OpenFlow Switch Specification Version 1.5.1}},
volume = {1},
year = {2015}
}

@article{OpenNetworkingFoundation2012,
abstract = {This document describes the requirements of an OpenFlow Switch. We recommend that you read the latest version of the OpenFlow whitepaper before reading this specification. The whitepaper is available on the OpenFlow Consortium website (http://openflow.org). This specification covers the components and the basic functions of the switch, and the OpenFlow protocol to manage an OpenFlow switch from a remote controller. Controller},
archivePrefix = {arXiv},
arxivId = {1512.00567},
author = {{Open Networking Foundation}},
doi = {10.1002/2014GB005021},
eprint = {1512.00567},
file = {:home/prometheus/Downloads/openflow-spec-v1.3.0.pdf:pdf},
isbn = {9781617796029},
issn = {09226389},
journal = {Current},
mendeley-groups = {FP},
pages = {1--36},
pmid = {8190083},
title = {{OpenFlow Switch Specification Version 1.3.0}},
volume = {0},
year = {2012}
}

@book{Hucaby2004,
abstract = {"The official self-study test preparation guide for the Cisco CCNP BCMSN exam 642-811" -- Cover./ "CCNP, CCDP" -- Spine./ Accompanying CD-ROM contains more than 300 practice questions for the BCMSN exam, including simulation-based questions. Its also contains the full text in electronic format.},
author = {Hucaby, Dave.},
isbn = {9781587200779},
mendeley-groups = {FP},
pages = {598},
publisher = {Cisco Press},
title = {{CCNP BCMSN exam certification guide : CCNP self-study}},
url = {https://books.google.de/books?id=-rnt{\_}ik0mSYC{\&}pg=PA71{\&}dq=TCAM{\&}redir{\_}esc=y{\#}v=onepage{\&}q=TCAM{\&}f=false},
year = {2004}
}

@misc{ESiliconCorporation2014,
author = {eSilicon Corporation},
file = {:home/prometheus/Downloads/High-Performance-Network-Data-Packet-Classification-Using-Embedded-Content-Addressable-Memory-TCAMs.pdf:pdf},
mendeley-groups = {FP},
pages = {1--15},
title = {{High-Performance Network Data-Packet Classification Using Embedded Content-Addressable Memory}},
year = {2014}
}

@article{Leng2017,
abstract = {A flow table in an OpenFlow based switch is used to not only operate the switch, but also carry out the control function of the Software Defined Network (SDN) controller. However, as a core participant of network management, its limited storage has been a significant roadblock for the industrialization of SDN. It is a significant problem to reduce the number of flow entries needed in the almost full-filled flow tables, and at the same time, to retain the original QoS as much as possible — or known as the “Flow Table Congestion Problem” (FTCP). We propose a mechanism called “Flow Table Reduction Scheme” (FTRS) to efficiently solve FTCP and evaluate the performance of FTRS both via simulation and experiment. The results show that FTRS is able to reduce the number of flow entries by 98{\%} at most of the size of flow table with no influence on network's normal functions.},
author = {Leng, Bing and Huang, Liusheng and Qiao, Chunming and Xu, Hongli and Wang, Xinglong},
doi = {10.1016/j.comnet.2017.04.022},
file = {:home/prometheus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Leng et al. - 2017 - FTRS A mechanism for reducing flow table entries in software defined networks.pdf:pdf},
isbn = {9781467364324},
issn = {13891286},
journal = {Computer Networks},
keywords = {Flow table,QoS,Reduction,Software Defined Network},
mendeley-groups = {FP},
pages = {1--15},
publisher = {Elsevier B.V.},
title = {{FTRS: A mechanism for reducing flow table entries in software defined networks}},
url = {http://dx.doi.org/10.1016/j.comnet.2017.04.022},
volume = {122},
year = {2017}
}

@article{Vishnoi2014,
abstract = {OpenFlow networks require installation of flow rules in a limited capacity switch memory (Ternary Content Addressable Memory or TCAMs, in particular) from a logically centralized controller. A controller can manage the switch memory in an OpenFlow network through events that are generated by the switch at discrete time intervals. Recent studies have shown that data centers can have up to 10,000 network flows per second per server rack today. Increasing the TCAM size to accommodate these large number of flow rules is not a viable solution since TCAM is costly and power hungry. Current OpenFlow controllers handle this issue by installing flow rules with a default idle timeout after which the switch automatically evicts the rule from its TCAM. This results in inefficient usage of switch memory for short lived flows when the timeout is too high and in increased controller workload for frequent flows when the timeout is too low. In this context, we present SmartTime - an OpenFlow controller system that combines an adaptive timeout heuristic to compute efficient idle timeouts with proactive eviction of flow rules, which results in effective utilization of TCAM space while ensuring that TCAM misses (or controller load) does not increase. To the best of our knowledge, SmartTime is the first real implementation of an intelligent flow management strategy in an OpenFlow controller that can be deployed in current OpenFlow networks. In our experiments using multiple real data center packet traces and cache sizes, SmartTime adaptive policy consistently outperformed the best performing static idle timeout policy or random eviction policy by up to 58{\%} in terms of total cost.},
author = {Vishnoi, Anilkumar and Poddar, Rishabh and Mann, Vijay and Bhattacharya, Suparna},
doi = {10.1145/2611286.2611301},
file = {:C$\backslash$:/Users/Hercules/Downloads/SmartTime.pdf:pdf},
isbn = {9781450327374},
journal = {Proceedings of the 8th ACM International Conference on Distributed Event-Based Systems - DEBS '14},
keywords = {idle timeout,openflow,software defined networking},
mendeley-groups = {FP},
pages = {177--188},
title = {{Effective switch memory management in OpenFlow networks}},
url = {http://dl.acm.org/citation.cfm?doid=2611286.2611301},
year = {2014}
}

@article{Lee2013,
author = {Lee, Bu Sung and Kanagavelu, Renuga and Aung, Khin Mi Mi},
doi = {10.1109/CloudNet.2013.6710553},
file = {:C$\backslash$:/Users/Hercules/Downloads/06710553.pdf:pdf},
isbn = {9781479905669},
journal = {Proceedings of the 2013 IEEE 2nd International Conference on Cloud Networking, CloudNet 2013},
keywords = {Data Center,Elephant flow,Flow cache,Software Defined Networking,TCAM},
mendeley-groups = {FP},
pages = {18--24},
publisher = {IEEE},
title = {{An efficient flow cache algorithm with improved fairness in Software-Defined Data Center Networks}},
year = {2013}
}

@article{Kanizo2013,
abstract = {In software-defined networks (SDNs), the network controller first formulates abstract network-wide policies, and then implements them in the forwarding tables of network switches. However, fast SDN tables often cannot scale beyond a few hundred entries. This is because they typically include wildcards, and therefore are implemented using either expensive and power-hungry TCAMs, or complex and slow data structures. This paper presents the Palette distribution framework for decomposing large SDN tables into small ones and then distributing them across the network, while preserving the overall SDN policy semantics. Palette helps balance the sizes of the tables across the network, as well as reduce the total number of entries by sharing resources among different connections. It copes with two NP-hard optimization problems: Decomposing a large SDN table into equivalent subtables, and distributing the subtables such that each connection traverses each type of subtable at least once. To implement the Palette distribution framework, we introduce graph-theoretical formulations and algorithms, and show that they achieve close-to-optimal results in practice.},
author = {Kanizo, Yossi and Hay, David and Keslassy, Isaac},
doi = {10.1109/INFCOM.2013.6566832},
file = {:C$\backslash$:/Users/Hercules/Downloads/infocom13{\_}palette.pdf:pdf},
isbn = {9781467359467},
issn = {0743166X},
journal = {Proceedings - IEEE INFOCOM},
mendeley-groups = {FP},
pages = {545--549},
pmid = {17018351},
title = {{Palette: Distributing tables in software-defined networks}},
year = {2013}
}

@article{Zhang2014,
abstract = {There is a strong trend in networking to move towards Software-Defined Networks (SDN). SDNs enable eas- ier network configuration through a separation between a centralized controller and a distributed dataplane comprising a network of switches. The controller implements network policies through installing rules on switches. Recently the “Big Switch” abstraction [1] was proposed as a specification mechanism for high-level network behavior, i.e., the network policies. The network operating system or compiler can use this specification for placing rules on individual switches. However, this is constrained by the limited capacity of the Ternary Content Addressable Memories (TCAMs) used for rules in each switch.We propose an Integer Linear Programming (ILP) based solution for placing rules on switches for a given firewall policy while optimizing for the total number of rules and meeting the switch capacity constraints. Experimental results demonstrate that our approach is scalable to practical sized networks.},
author = {Zhang, Shuyuan and Ivancic, Franjo and Lumezanu, Cristian and Yuan, Yifei and Gupta, Aarti and Malik, Sharad},
doi = {10.1109/DSN.2014.24},
file = {:C$\backslash$:/Users/Hercules/Downloads/06903570.pdf:pdf},
isbn = {9781479922338},
journal = {Proceedings - 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, DSN 2014},
keywords = {Big Switch Abstraction,Distributed Firewall,Rule Placement,SDN},
mendeley-groups = {FP},
pages = {88--99},
publisher = {IEEE},
title = {{An adaptable rle placement for software-defined Networks}},
year = {2014}
}

@article{Liu2010,
abstract = {The global routing table size has been increasing rapidly, outpacing the upgrade cycle of router hardware. Recently aggregating the Forwarding Information Base (FIB) emerges as a promising solution since it reduces FIB size significantly in the short term and it is compatible with any long-term architectural solutions. Because FIB entries change dynamically with routing updates, an important component of any FIB aggregation scheme is to handle routing updates efficiently while shrinking FIB size as much as possible. In this paper, we first propose two incremental FIB aggregation algorithms based on the ORTC scheme. We then quantify the tradeoffs of the proposed algorithms, which will help operators choose the algorithms best suited for their networks. {\textcopyright}2010 IEEE.},
author = {Liu, Yaoqing and Zhao, Xin and Nam, Kyuhan and Wang, Lan and Zhang, Beichuan},
doi = {10.1109/GLOCOM.2010.5683158},
file = {:C$\backslash$:/Users/Hercules/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Liu et al. - 2010 - Incremental forwarding table aggregation.pdf:pdf},
isbn = {9781424456383},
journal = {GLOBECOM - IEEE Global Telecommunications Conference},
mendeley-groups = {FP},
number = {Figure 1},
title = {{Incremental forwarding table aggregation}},
year = {2010}
}

@article{Luo2014,
abstract = {—In OpenFlow-based SDN, flow tables are TCAM-hungry and commodity switches suffer from limited concrete flow table size. One method for coping with the limitations is to use aggregation schemes to reduce the number of flow entries required to represent the same forwarding semantics. Unfor-tunately, the aggregation retards table updates and lengthens the updating time. During which, the data plane is inconsistent with the control plane, forwarding errors such as Reachability Failures, Forwarding Loops, Traffic Isolation and Leakage are prone to occur. Since network updates take place frequently in practice, the aggregation scheme must be efficient enough. In this paper we propose offline FFTA (Fast Flow Table Aggregation) and its online improver iFFTA to shrink the flow table size and to provide practical fast updates. iFFTA is the first online non-prefix aggregation scheme. Extensive experiments demonstrate: (1) FFTA is about 200× faster than the previously published best non-prefix aggregation scheme without loss of compression ratio on offline aggregation; and (2) iFFTA achieves about 3× faster than FFTA on online update incorporations with a loss of an acceptable compression ratio per update. Thus the user could make a combination use of FFTA and iFFTA for table aggregations: call iFFTA usually and recall the efficient FFTA once the switch is running out of concrete flow table space.},
author = {Luo, Shouxi and Yu, Hongfang and Li, Le Min},
doi = {10.1109/ICCCN.2014.6911781},
file = {:C$\backslash$:/Users/Hercules/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Luo, Yu, Li - 2014 - Fast incremental flow table aggregation in SDN.pdf:pdf},
isbn = {9781479935727},
issn = {10952055},
journal = {Proceedings - International Conference on Computer Communications and Networks, ICCCN},
mendeley-groups = {FP},
number = {2013},
title = {{Fast incremental flow table aggregation in SDN}},
year = {2014}
}
